type Query {
  users(query: String, skip: Int, take: Int, cursor: String): [User!]!
  user(id: ID): User!

  categories(query: String, skip: Int, take: Int, cursor: String): [Category!]!
  category(id: ID!): Category!

  tickets(
    categoryId: ID
    userId: ID
    query: String
    skip: Int
    take: Int
    cursor: String
  ): [Ticket!]!
  ticket(id: ID!): Ticket!

  labels(
    ticketId: ID
    query: String
    skip: Int
    take: Int
    cursor: String
  ): [Label!]!
  label(id: ID!): Label!
}

type Mutation {
  createUser(data: CreateUserInput!): AuthPayload!
  login(data: LoginUserInput!): AuthPayload!
  updateUser(data: UpdateUserInput!): User!
  deleteUser: User!

  createCategory(data: CreateCategoryInput!): Category!
  updateCategory(id: ID!, data: UpdateCategoryInput!): Category!
  deleteCategory(id: ID!): Category!

  createTicket(data: CreateTicketInput!): Ticket!
  updateTicket(id: ID!, data: UpdateTicketInput!): Ticket!
  deleteTicket(id: ID!): Ticket!

  createLabel(data: CreateLabelInput!): Label!
  updateLabel(id: ID!, data: UpdateLabelInput!): Label!
  deleteLabel(id: ID!): Label!
}

input CreateUserInput {
  firstName: String!
  lastName: String!
  email: String!
  password: String!
}

input LoginUserInput {
  email: String!
  password: String!
}

input UpdateUserInput {
  firstName: String
  lastName: String
  email: String
  password: String
}

input CreateCategoryInput {
  title: String!
}

input UpdateCategoryInput {
  title: String!
}

input CreateTicketInput {
  title: String!
  description: String!
  expiryDate: Date!
  categoryId: String!
  userId: String!
}

input UpdateTicketInput {
  title: String
  description: String
  expiryDate: Date
  categoryId: String
  userId: String
}

input CreateLabelInput {
  title: String!
  ticketId: String!
}

input UpdateLabelInput {
  title: String!
}
